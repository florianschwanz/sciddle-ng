pipeline {
    agent {
        node {
            label 'master'
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage('Clean') {
            steps {
                sh "rm -rf ${WORKSPACE}/dist/*"
                sh "rm -rf ${WORKSPACE}/reports/*"
                sh "rm -rf ${WORKSPACE}/coverage/*"
                sh "mkdir -p ${WORKSPACE}/reports"
            }
        }
        stage('Init submodules') {
            steps {
                sh "git submodule init"
                sh "git submodule update"
            }
        }
        stage('Build Angular') {
            steps {
                // Hack since angular.json replacement cannot replace files other than ts at the moment
                sh "cp ${WORKSPACE}/src/index-s4f.html ${WORKSPACE}/src/index.html"
                sh "cp ${WORKSPACE}/src/favicon-s4f.ico ${WORKSPACE}/src/favicon.ico"
                sh "cp ${WORKSPACE}/src/assets/manual/manual-de-s4f.md ${WORKSPACE}/src/assets/manual/manual-de.md"
                sh "npm install"
                sh "npm run build-de-s4f-prod"
            }
        }
        stage('Lint') {
            steps {
                sh "npm run lint-junit"
                junit allowEmptyResults: true, testResults: 'reports/**/lint-results.xml'
            }
        }
        stage('Compodoc') {
            steps {
                sh "npm run compodoc"
                publishHTML (target: [
                  allowMissing: true,
                  alwaysLinkToLastBuild: false,
                  keepAll: true,
                  reportDir: 'reports/documentation',
                  reportFiles: 'index.html',
                  reportName: "Compodoc"
                ])
            }
        }
        stage('Test') {
            steps {
                sh "npm run test"
                junit allowEmptyResults: true, testResults: 'reports/**/test-results.xml'
            }
        }
        stage('Deploy') {
            steps {
                sh "firebase deploy --project sciddle-riddle --only hosting:sciddle-s4f --token ${FIREBASE_TOKEN}"
            }
        }
        stage('Release') {
            steps {
                sh "npm run release-only-web-s4f"
            }
        }
        stage('Results') {
            steps {
                // junit '**/jslint-test-results.xml'
                archive '**/*.zip'
            }
        }
    }
}
